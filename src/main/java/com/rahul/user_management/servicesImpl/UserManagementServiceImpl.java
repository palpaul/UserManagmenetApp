package com.rahul.user_management.servicesImpl;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.stream.Stream;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.rahul.user_management.binding.LoginForm;
import com.rahul.user_management.binding.UnlockAccountForm;
import com.rahul.user_management.binding.UserForm;
import com.rahul.user_management.dao.CityRepo;
import com.rahul.user_management.dao.CountryRepo;
import com.rahul.user_management.dao.StateRepo;
import com.rahul.user_management.dao.UserRepo;
import com.rahul.user_management.entity.City;
import com.rahul.user_management.entity.Country;
import com.rahul.user_management.entity.State;
import com.rahul.user_management.entity.User;
import com.rahul.user_management.services.UserMgmtService;
import com.rahul.user_management.utils.EmailUtils;

@Service
public class UserManagementServiceImpl implements UserMgmtService {

	@Autowired
	private CountryRepo countryRepo;
	@Autowired
	private CityRepo cityRepo;
	@Autowired
	private StateRepo stateRepo;
	@Autowired
	private UserRepo userRepo;
	
	@Autowired
	private EmailUtils emailUtils;

	@Override
	public String checkEmail(String email) {
		User emailstatus = userRepo.findByEmail(email);
		if (emailstatus == null) {
			return "UNIQUE EMAIL";
		}
		return "DUPLICATE EMAIL";
	}

	@Override
	public Map<Integer, String> getCountries() {
		List<Country> countries = countryRepo.findAll();
		Map<Integer,String > countryMap = new HashMap<>();
		countries.forEach(cntry->{
			countryMap.put(cntry.getCountryid(), cntry.getCountryname());
		});
		return countryMap;
	}

	@Override
	public Map<Integer, String> getStates(Integer countryId) {
		List<State> states = stateRepo.findBycountryid(countryId);
		Map<Integer, String> statesMap= new HashMap<>();
		states.forEach(state->{
			statesMap.put(state.getStateid(), state.getStatename());
		});
		return statesMap;
	}

	@Override
	public Map<Integer, String> getCities(Integer stateId) {
		List<City> cities = cityRepo.findBystateid(stateId);
		Map<Integer, String> citiMap = new HashMap<>();
		cities.forEach(city->{
			citiMap.put(city.getCityid(), city.getCityname());
		});
		return citiMap; 
	}

	@Override
	public String registerUser(UserForm userForm) {
		//copy data from binding object(user enter the data into form) to entity object
		User entity = new User();
		BeanUtils.copyProperties(userForm, entity);
		//before saving generate & send random password
		entity.setUserPwd(generateRandomPwd()); // here calling that method which we created to generate random pass. okay
		//set Account status as LOCKED
		entity.setAccstatus("LOCKED");	
		
		userRepo.save(entity);
		//TODO: send email to unlock the account ... these two thing we nned for user registration  ok that why we are setting
		
		String to = userForm.getEmail();
		String subject = "Registration Email";
		String body =readEmailBody("REG_EMAIL_BODY.txt", entity);
		emailUtils.sendEmail(to, subject, body);
		
		return "USeer Account is Created";
	}
	
	@Override
	public String unlockAccount(UnlockAccountForm unlAccForm) {
		//return userRepo.save(unlAccForm);
		//first get the email form user 
		String email = unlAccForm.getEmail();
		//now based on the emailid we are retrieving the record okay
		User userRecord = userRepo.findByEmail(email);
		
		//here temporary pass means current pass that is generated by staystem and stored in db so we are verifying that okay
		if(userRecord!=null && userRecord .getUserPwd().equals(unlAccForm.getTempPwd())) {
			if(unlAccForm.getNewPwd()!=unlAccForm.getConfirmPwd()) {
			return "new Password and confirm password should be match";
			}
			userRecord.setUserPwd(unlAccForm.getNewPwd());
			userRecord.setAccstatus("UNLOCKED");
			
			userRepo.save(userRecord);
			return "Account Un locked";
			
		}
		return "Invalid Temparory Password";
	}

	@Override
	public String login(LoginForm loginForm) {
		User userRecord = userRepo.findByEmailAndUserPwd(loginForm.getEmail(), loginForm.getPwd());
		if(userRecord== null) {
			return "Invalid Credentials";
		}if(userRecord.getAccstatus().equals("LOCKED")) {
			return "Account Locaked";
		}
		
		return "Logged In SUCCESS";
	}

	@Override
	public String forgetPass(String email) {
		User userEmail = userRepo.findByEmail(email);
		if(userEmail==null) {
			return "No account found";
		}
		if(userEmail!=null) {
		//	TODO:  send email to user with Pwd
			String subject = "Recover Password";
			String body = readEmailBody("Forget_pass_body.txt", userEmail);
			
			emailUtils.sendEmail(email, subject, body);
			 
		}
		return "Password sent to registered email";
	}

	@Override
	public String logout(int id) {
		// TODO Auto-generated method stub
		return null;
	}
	
	
	///creating one private(because we need to use this method here only ie. private okay) method to generate random password okay
	private String generateRandomPwd() {
		String text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
		StringBuilder sb = new StringBuilder();
		
		Random random = new Random();
		int pwdLength = 9;
		
		 for(int i = 1 ;i<=pwdLength;i++) {
			 int index = random.nextInt(text.length());
			 sb.append(text.charAt(index));
		 }
		return sb.toString();
	}
	
	//created method for reading email body txt file data to get the data dynamically
	private String readEmailBody(String filename,User user ){
		
		StringBuffer sb = new StringBuffer();
		try(Stream<String >lines= Files.lines(Paths.get(filename))) {
			lines.forEach(line->{
				line = line.replace("${FNAME}", user.getFname());
				line = line.replace("${LNAME}", user.getLname());
				line = line.replace("${TEMP_PWD}", user.getUserPwd());
				line = line.replace("${EMAIL}", user.getEmail());
				line = line.replace("${PWD}", user.getUserPwd());
				sb.append(line);
			});
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return sb.toString();
	}
	

}
